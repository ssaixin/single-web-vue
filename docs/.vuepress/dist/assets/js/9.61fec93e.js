(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{366:function(t,a,_){"use strict";_.r(a);var v=_(44),s=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"微前端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微前端"}},[t._v("#")]),t._v(" 微前端")]),t._v(" "),_("p",[t._v("什么是微前端，简单来说，就是把各个子项目整合到一起，也就是将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，而在用户看来仍然是内聚的单个产品。")]),t._v(" "),_("h2",{attrs:{id:"实施微前端的六种方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实施微前端的六种方式"}},[t._v("#")]),t._v(" 实施微前端的六种方式")]),t._v(" "),_("p",[t._v("从"),_("a",{attrs:{target:"“_blank”",href:"https://github.com/phodal/microfrontends#实施微前端的六种方式"}},[t._v("《前端架构：从入门到微前端》")]),t._v("这本书中，我们可以了解到微前端架构一般可以由以下几种方式进行：")]),t._v(" "),_("p",[t._v("1、使用 HTTP 服务器的路由来重定向多个应用")]),t._v(" "),_("p",[t._v("2、在不同的框架之上设计通讯、加载机制，诸如 Single-SPA")]),t._v(" "),_("p",[t._v("3、通过组合多个独立应用、组件来构建一个单体应用")]),t._v(" "),_("p",[t._v("4、iFrame。使用 iFrame 及自定义消息传递机制")]),t._v(" "),_("p",[t._v("5、使用纯 Web Components 构建应用")]),t._v(" "),_("p",[t._v("6、结合 Web Components 构建")]),t._v(" "),_("p",[t._v("其中比较常见的就是"),_("code",[t._v("iframe")]),t._v("和"),_("code",[t._v("single-spa")]),t._v("构建，"),_("code",[t._v("iframe")]),t._v("大家都比较熟悉，我就不一一赘述了，"),_("code",[t._v("single-spa")]),t._v("大家比较陌生，这里主要介绍一下"),_("code",[t._v("single-spa")]),t._v(".")]),t._v(" "),_("h2",{attrs:{id:"适用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),_("p",[t._v("项目庞大，多个子项目整合在一个大的项目中。即使子项目的所用的技术栈不同，比如vue,react, angular有相应的single-spa的轮子，可以进行整合。")]),t._v(" "),_("h2",{attrs:{id:"不适用于"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不适用于"}},[t._v("#")]),t._v(" 不适用于")]),t._v(" "),_("p",[t._v("（1）< ie9 以下的版本")]),t._v(" "),_("p",[t._v("（2）项目不大型，不需要切分")]),t._v(" "),_("p",[t._v("（3）项目应用之间没有必然的联系")]),t._v(" "),_("h2",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),_("p",[t._v("（1） 若多个应用之间公用一些共有的部分，可将其抽离出来，在最终的打包过程中明显的体积缩小。运行加快。")]),t._v(" "),_("p",[t._v("（2）不同的应用之间，由一个跳转到另一个时，在不涉及应用之间状态交互时，不用考虑重写之类的问题，只需配置好对应的spa，就可以进行切换")]),t._v(" "),_("h2",{attrs:{id:"single-spa和iframe对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#single-spa和iframe对比"}},[t._v("#")]),t._v(" single-spa和iframe对比")]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/if-si.png",alt:""}})]),t._v(" "),_("h2",{attrs:{id:"微前端的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微前端的作用"}},[t._v("#")]),t._v(" 微前端的作用")]),t._v(" "),_("p",[_("code",[t._v("我们为什么要为什么需要微前端？")])]),t._v(" "),_("p",[_("code",[t._v("微前端能解决什么问题？组件化解决不了吗？")])]),t._v(" "),_("p",[_("code",[t._v("微前端究竟带来了什么？多技术栈并存？统一的技术栈不好吗？")])]),t._v(" "),_("p",[t._v("我们需要一种分解复杂度、提升协作效率、支持灵活扩展的架构模式，通过拆分自治、支持多技术栈并存的方式，解决前端应用所面临的种种问题：比如业务模块间日益加剧的耦合如何治理？开发团队如何拆分、解耦，才能达到并行开发的目的？新框架、新方案如何适应现有的工程环境（构建工具等）？旧的框架类库如何平稳升级？。。。")]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/pic02.png",alt:""}})]),t._v(" "),_("p",[t._v("简单的说，我们希望能达到以下目的：")]),t._v(" "),_("p",[t._v("分解：将应用拆分成由一系列小型应用（子应用）组成的应用")]),t._v(" "),_("p",[t._v("替换：替换子应用")]),t._v(" "),_("p",[t._v("组合：确保替换过的能够和谐工作")]),t._v(" "),_("h2",{attrs:{id:"参考资料"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),_("p",[t._v("更好的理解，可以参考这些链接：")]),t._v(" "),_("p",[t._v("前端：")]),t._v(" "),_("p",[_("a",{attrs:{target:"“_blank”",href:"https://juejin.cn/post/6844903512107663368"}},[t._v("你要懂的单页面应用和多页面应用")])]),t._v(" "),_("p",[_("a",{attrs:{target:"“_blank”",href:"https://juejin.cn/post/6844903943873675271"}},[t._v("每日优鲜供应链前端团队微前端改造")])]),t._v(" "),_("p",[_("a",{attrs:{target:"“_blank”",href:"https://github.com/phodal/microfrontends"}},[t._v("微前端的那些事儿")])])])}),[],!1,null,null,null);a.default=s.exports}}]);